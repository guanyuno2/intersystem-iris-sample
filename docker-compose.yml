version: '3.8'

services:
  # Core Services
  iris:
    image: intersystemsdc/iris-community:latest
    container_name: iris-database
    ports:
      - "52773:52773"
      - "1972:1972"
    volumes:
      - ./iris-data:/opt/irissys/mgr
      - ./src:/opt/demo/src
    environment:
      - IRIS_USERNAME=SuperUser
      - IRIS_PASSWORD=SYS
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:52773/csp/sys/UtilHome.csp"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dashboards
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/conf:/etc/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    container_name: redis-queue
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integration Services
  hl7-simulator:
    build: ./services/hl7-simulator
    container_name: hl7-simulator
    ports:
      - "8080:8080"
    depends_on:
      - iris
      - redis
    environment:
      - IRIS_HOST=iris
      - REDIS_HOST=redis
      - MESSAGE_RATE=50
      - SIMULATION_DURATION=3600
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mock-emr:
    build: ./services/mock-systems/emr
    container_name: mock-emr
    ports:
      - "8001:8000"
    depends_on:
      - iris
    environment:
      - IRIS_HOST=iris
      - SYSTEM_TYPE=EMR
    restart: unless-stopped

  mock-lab:
    build: ./services/mock-systems/lab
    container_name: mock-lab
    ports:
      - "8002:8000"
    depends_on:
      - iris
    environment:
      - IRIS_HOST=iris
      - SYSTEM_TYPE=LAB
    restart: unless-stopped

  mock-pharmacy:
    build: ./services/mock-systems/pharmacy
    container_name: mock-pharmacy
    ports:
      - "8003:8000"
    depends_on:
      - iris
    environment:
      - IRIS_HOST=iris
      - SYSTEM_TYPE=PHARMACY
    restart: unless-stopped

  data-generator:
    build: ./services/data-generator
    container_name: data-generator
    depends_on:
      - iris
    environment:
      - IRIS_HOST=iris
      - PATIENT_COUNT=1000
      - DOCTOR_COUNT=20
      - DEPARTMENT_COUNT=10
    volumes:
      - ./generated-data:/app/data
    restart: "no"

  # Analytics Services
  analytics:
    build: ./services/analytics
    container_name: analytics-engine
    ports:
      - "8081:8080"
    depends_on:
      - iris
      - redis
      - grafana
    environment:
      - IRIS_HOST=iris
      - REDIS_HOST=redis
      - GRAFANA_HOST=grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alerts:
    build: ./services/alerts
    container_name: alert-system
    ports:
      - "8082:8000"
    depends_on:
      - iris
      - redis
      - grafana
    environment:
      - IRIS_HOST=iris
      - REDIS_HOST=redis
      - GRAFANA_HOST=grafana
    restart: unless-stopped

  monitoring:
    build: ./services/monitoring
    container_name: performance-monitoring
    ports:
      - "9090:9090"
    depends_on:
      - iris
      - redis
      - grafana
    environment:
      - IRIS_HOST=iris
      - REDIS_HOST=redis
      - GRAFANA_HOST=grafana
    restart: unless-stopped

  benchmarking:
    build: ./services/benchmarking
    container_name: benchmarking-service
    depends_on:
      - iris
    environment:
      - IRIS_HOST=iris
      - BENCHMARK_DURATION=300
      - CONCURRENT_USERS=10
    volumes:
      - ./benchmark-results:/app/results
    restart: "no"

# Networks
networks:
  default:
    driver: bridge

# Volumes
volumes:
  iris-data:
  redis-data:
  generated-data:
  benchmark-results:
